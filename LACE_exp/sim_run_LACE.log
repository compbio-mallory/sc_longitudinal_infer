# Create folders for results of each datasets
for i in ./sim_input/*; do
        simDataType=$(echo $i| cut -d'/' -f 3)
        #echo $simDataType
        mkdir sim_output/$simDataType
        for k in `seq 1 5`; do
                mkdir sim_output/$simDataType/rep$k;
        done
done

# Read the LACE input RData and run LACE on it
for i in ./sim_input/*; do
        simDataType=$(echo $i| cut -d'/' -f 3)
        for k in `seq 1 5`; do
		filename=$simDataType'_'rep$k
		#echo $filename
                for j in ./sim_input/$simDataType/rep$k/$filename.RData; do
			#echo $j
			echo "module load R" >> sim_run_LACE.sh
			echo "Rscript run_LACE.R $j sim_output/$simDataType/rep$k/$filename"'_inf.rdata'" sim_output/$simDataType/rep$k/$filename"'_lgTree.xml'"" >> sim_run_LACE.sh
			echo "#" >> sim_run_LACE.sh
		done
	done
done 

conda activate pythonenv

# Create .slurm files to run the job
python gen_jobs.py -input sim_run_LACE.sh -n 4 -mem_per_cpu 8GB -p fan_q -algo LACE -sim true 

#Launch jobs
for i in `seq 91 100`; do sbatch sim_run_LACE.$i.slurm; done

# Save the job time for inferring the tree
python get_job_time.py

module load R

#After saving LACE inference results from their run
for i in ./sim_input/*; do
        simDataType=$(echo $i| cut -d'/' -f 3)
	for k in `seq 1 5`; do
		filename=$simDataType'_'rep$k
		Rscript read_LACE_inference.R sim_output/$simDataType/rep$k/$filename'_inf.rdata' sim_output/$simDataType/rep$k/$filename'_inf.json' sim_output/$simDataType/rep$k/clones_summary.json
	done
done

#Python script to process the output of LACE and get the mutations at each timepoint. And the assignment.txt file where each cells assigned to the clones to calculate V-measure.
for i in ./sim_input/*; do
        simDataType=$(echo $i| cut -d'/' -f 3)
        for k in `seq 1 5`; do
		filename=$simDataType'_'rep$k
		python processOutput.py -cInf sim_output/$simDataType/rep$k/$filename'_inf.json' -clonesSum sim_output/$simDataType/rep$k/clones_summary.json -path sim_output/$simDataType/rep$k/
	done
done

# Python script to get the precision and recall 
for i in ./sim_input/*; do
        simDataType=$(echo $i| cut -d'/' -f 3)
        for k in `seq 1 5`; do
                filename=$simDataType'_'rep$k
		if [[ $simDataType == "sp05" ]] || [[ $simDataType == "sp5" ]] || [[ $simDataType == "theta3" ]] || [[ $simDataType == "theta5" ]] || [[ $simDataType == "u0" ]] || [[ $simDataType == "u1" ]] || [[ $simDataType == "u3" ]] || [[ $simDataType == "v1v2" ]]; then
			python calculate_PrecisionRecall.py -mut sim_input/$simDataType/rep$k/'input_'$filename.mut.csv -gtTree sim_input/$simDataType/rep$k/'tree_'$simDataType'_'rep$k'.csv' -lace true -laceFile sim_output/$simDataType/rep$k/tp_mut.json > sim_output/$simDataType/rep$k/eval_metrics.txt
			python evaluation.py -i "lace:"./sim_output/$simDataType/rep$k/assignment.txt -G ./sim_input/$simDataType/rep$k/'input_'$filename'.G.csv' -d true -df ./sim_input/$simDataType/rep$k/'input_'$simDataType'_'rep$k'.SNVcell.csv' -v >> sim_output/$simDataType/rep$k/eval_metrics.txt
		elif [[ $simDataType == "t4" ]] || [[ $simDataType == "t5" ]]; then
			python calculate_PrecisionRecall.py -mut sim_input/$simDataType/rep$k/$filename.mut.csv -gtTree sim_input/$simDataType/rep$k/'tree_'$simDataType'_'rep$k'.csv' -lace true -laceFile sim_output/$simDataType/rep$k/tp_mut.json > sim_output/$simDataType/rep$k/eval_metrics.txt
			python evaluation.py -i "lace:"./sim_output/$simDataType/rep$k/assignment.txt -G ./sim_input/$simDataType/rep$k/$filename'.G.csv' -d true -df ./sim_input/$simDataType/rep$k/$simDataType'_'rep$k'.SNVcell.csv' -v >> sim_output/$simDataType/rep$k/eval_metrics.txt
		elif [[ $simDataType == "default" ]]; then
			python calculate_PrecisionRecall.py -mut sim_input/$simDataType/rep$k/$filename.mut.csv -gtTree sim_input/$simDataType/rep$k/'tree_default_'rep$k'.csv' -lace true -laceFile sim_output/$simDataType/rep$k/tp_mut.json > sim_output/$simDataType/rep$k/eval_metrics.txt
			python evaluation.py -i "lace:"./sim_output/$simDataType/rep$k/assignment.txt -G ./sim_input/$simDataType/rep$k/$filename'.G.csv' -d true -df ./sim_input/$simDataType/rep$k/$simDataType'_'rep$k'.SNVcell.csv' -v >> sim_output/$simDataType/rep$k/eval_metrics.txt
		else
			python calculate_PrecisionRecall.py -mut sim_input/$simDataType/rep$k/'input_'$filename.mut.csv -gtTree sim_input/$simDataType/rep$k/'tree_default_'rep$k'.csv' -lace true -laceFile sim_output/$simDataType/rep$k/tp_mut.json > sim_output/$simDataType/rep$k/eval_metrics.txt
			python evaluation.py -i "lace:"./sim_output/$simDataType/rep$k/assignment.txt -G ./sim_input/$simDataType/rep$k/'input_'$filename'.G.csv' -d true -df ./sim_input/$simDataType/rep$k/'input_'$simDataType'_'rep$k'.SNVcell.csv' -v >> sim_output/$simDataType/rep$k/eval_metrics.txt
		fi
	done
done



