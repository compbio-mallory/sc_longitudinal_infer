# Make directory for each repetition and multiple runs of each repetitions as well
for i in ./sim_input/*; do
        simDataType=$(echo $i| cut -d'/' -f 3)
        #echo $simDataType
        mkdir sim_output/$simDataType
        for k in `seq 1 5`; do
                mkdir sim_output/$simDataType/rep$k;
		for j in `seq 1 5`; do
			mkdir sim_output/$simDataType/rep$k/m$j;
		done
        done
done

conda activate pythonenv

# Process the sim input files for bnpc
for i in ./sim_input/*; do
        echo $i
        simDataType=$(echo $i| cut -d'/' -f 3)
        echo $simDataType
        for k in `seq 1 5`; do
                for j in ./sim_input/$simDataType/rep$k/*D.csv; do
                        python processSimInput.py -input $j -output ./sim_input/$simDataType/rep$k
                done
        done
done

# Run BnpC for 5 times for each dataset
for i in ./sim_input/*; do
        simDataType=$(echo $i| cut -d'/' -f 3)
        #simDataType='default_mr' # Uncomment the above line and comment this line when running for all files.
        for k in `seq 1 5`; do
                for j in ./sim_input/$simDataType/rep$k/*D.tsv; do
                        #echo $j
                        for z in `seq 1 5`; do
                                echo "time python ../../BnpC/run_BnpC.py $j -o ./sim_output/$simDataType/rep$k/m$z" >> sim_run_bnpc_mr.sh;
                                echo "#" >> sim_run_bnpc_mr.sh
                        done
                done
        done
done

python gen_jobs.py -input sim_run_bnpc_mr.sh -n 4 -mem_per_cpu 8GB -p fan_q -algo bnpc -sim true

# Run the slurm files and ignore from 150 to 174 because those are default files for which we have already tested.
for i in `seq 401 500`; do sbatch sim_run_bnpc_mr.$i.slurm; done

# Get the consensus genotype from the Clustering results
# Maybe delete the 'default' folder for now and copy it from the 'test_best_cluster_solution' folder
for i in ./sim_output/*; do
        simDataType=$(echo $i| cut -d'/' -f 3)
        #echo $simDataType
        for k in `seq 1 5`; do
               for j in `seq 1 5`; do
			fileName=$simDataType'_'rep$k'_'m$j
                        #echo $fileName
                        if [[ $simDataType == "t4" ]] || [[ $simDataType == "t5" ]] || [[ $simDataType == "default" ]]; then
				echo "time python gen_bnpc_getGmatrix.py -cc sim_output/$simDataType/rep$k/m$j/assignment.txt -gp sim_output/$simDataType/rep$k/m$j/genotypes_posterior_mean.tsv -celltp sim_input/$simDataType/rep$k/$simDataType"'_'"rep$k"'.SNVcell.csv'" -doublet false -op sim_consensus_genotype/$fileName"'.G'"" >> run_longTreeAlgo.sh;
				echo "time python inputForTree.py -cc sim_output/$simDataType/rep$k/m$j/assignment.txt -cg sim_consensus_genotype/$fileName"'.G.tsv'" -sim false -celltp sim_input/$simDataType/rep$k/$simDataType"'_'"rep$k"'.SNVcell.csv'" -op sim_input_ForTree/$simDataType"'_'"rep$k"'_'"m$j"'.Gprime.csv'" -ccop sim_input_ForTree/$simDataType"'_'"rep$k"'_'"m$j"'.npy'"" >> run_longTreeAlgo.sh;
				echo "time python getEstimatedFPFN.py -G sim_consensus_genotype/$fileName"'.G.tsv'" -D sim_input/$simDataType/rep$k/$simDataType"'_'"rep$k"'.D.csv'" -op sim_output/$simDataType/rep$k/m$j/$fileName"'_FPFN.npy'"" >> run_longTreeAlgo.sh;
				echo "time python longitudinalTree.py -input sim_input_ForTree/$fileName"'.Gprime.csv'" -cg sim_consensus_genotype/$fileName"'.G.tsv'" -cc sim_input_ForTree/$fileName"'.npy'" -D sim_input/$simDataType/rep$k/$simDataType"'_'"rep$k"'.D.csv'" -celltp sim_input/$simDataType/rep$k/$simDataType"'_'"rep$k.SNVcell.csv -FPFN sim_output/$simDataType/rep$k/m$j/$fileName"'_FPFN.npy'" -sim false -op_tree all_trees/$fileName"'_tree.csv'" -cloneNode all_trees/$fileName"'_cloneNode.npy'" -cloneCells all_trees/$fileName"'_cloneCells.npy'"">> run_longTreeAlgo.sh;
			else
                        	echo "time python gen_bnpc_getGmatrix.py -cc sim_output/$simDataType/rep$k/m$j/assignment.txt -gp sim_output/$simDataType/rep$k/m$j/genotypes_posterior_mean.tsv -celltp sim_input/$simDataType/rep$k/"'input_'"$simDataType"'_'"rep$k.SNVcell.csv -doublet false -op sim_consensus_genotype/$fileName.G" >> run_longTreeAlgo.sh
				echo "time python inputForTree.py -cc sim_output/$simDataType/rep$k/m$j/assignment.txt -cg sim_consensus_genotype/$fileName.G.tsv -sim false -celltp sim_input/$simDataType/rep$k/"'input_'"$simDataType"'_'"rep$k.SNVcell.csv -op sim_input_ForTree/$simDataType"'_'"rep$k"'_'"m$j.Gprime.csv -ccop sim_input_ForTree/$simDataType"'_'"rep$k"'_'"m$j.npy" >> run_longTreeAlgo.sh
				echo "time python getEstimatedFPFN.py -G sim_consensus_genotype/$fileName"'.G.tsv'" -D sim_input/$simDataType/rep$k/"'input_'"$simDataType"'_'"rep$k"'.D.csv'" -op sim_output/$simDataType/rep$k/m$j/$fileName"'_FPFN.npy'""  >> run_longTreeAlgo.sh
				echo "time python longitudinalTree.py -input sim_input_ForTree/$fileName"'.Gprime.csv'" -cg sim_consensus_genotype/$fileName"'.G.tsv'" -cc sim_input_ForTree/$fileName"'.npy'" -D sim_input/$simDataType/rep$k/"'input_'"$simDataType"'_'"rep$k"'.D.csv'" -celltp sim_input/$simDataType/rep$k/"'input_'"$simDataType"'_'"rep$k.SNVcell.csv -FPFN sim_output/$simDataType/rep$k/m$j/$fileName"'_FPFN.npy'" -sim false -op_tree all_trees/$fileName"'_tree.csv'" -cloneNode all_trees/$fileName"'_cloneNode.npy'" -cloneCells all_trees/$fileName"'_cloneCells.npy'"" >> run_longTreeAlgo.sh
			fi
		done
		echo "time python selectBestCluster.py -tree all_trees/$simDataType"'_'"rep$k"'_m1_tree.csv'" all_trees/$simDataType"'_'"rep$k"'_m2_tree.csv'" all_trees/$simDataType"'_'"rep$k"'_m3_tree.csv'" all_trees/$simDataType"'_'"rep$k"'_m4_tree.csv'" all_trees/$simDataType"'_'"rep$k"'_m5_tree.csv'" -bnpcOp sim_output/$simDataType/rep$k" >> run_longTreeAlgo.sh;
		echo "#" >> run_longTreeAlgo.sh;
        done
done

# Generate slurm files to run the entire longitudinal algo pipeline and record time
python gen_jobs.py -input run_longTreeAlgo.sh -n 4 -mem_per_cpu 8GB -p fan_q -algo lgTree -sim true

# Run the slurm files to get the longitudinal tree
for i in `seq 41 100`; do sbatch run_longTreeAlgo.$i.slurm; done

# Save the total time starting from BnpC clustering for all runs till our pipeline
for i in ./sim_output/*; do
        simDataType=$(echo $i| cut -d'/' -f 3)
        #echo $simDataType
        for k in `seq 1 5`; do
		python getTotalTime.py -sim_dir sim_output/$simDataType/rep$k
	done
done

# Get the evaluation metrics: V-measure for BnpC, precision, recall and unobserved subclones 
for i in ./sim_output/*; do
	simDataType=$(echo $i| cut -d'/' -f 3)
	for k in `seq 1 5`; do
		filename=$simDataType'_'rep$k
		for j in bestTree/$filename*.csv; do
			#jarr=$(echo $j | tr "/" "\n")
			jarr=(${j//// })
			#echo ${jarr[1]}
			bestTreeFile=${jarr[1]}
			bestTreeFile_arr=(${bestTreeFile//_/ })
			#echo ${bestClusterNo[2]}
			bestClusterNo=${bestTreeFile_arr[2]}
			if [[ $simDataType == "sp05" ]] || [[ $simDataType == "sp5" ]] || [[ $simDataType == "theta3" ]] || [[ $simDataType == "theta5" ]] || [[ $simDataType == "u0" ]] || [[ $simDataType == "u1" ]] || [[ $simDataType == "u3" ]] || [[ $simDataType == "v1v2" ]]; then
				python calculate_PrecisionRecall.py -mut sim_input/$simDataType/rep$k/'input_'$filename.mut.csv -gtTree sim_input/$simDataType/rep$k/'tree_'$simDataType'_'rep$k'.csv' -lgTree $j -lace false > sim_output/$simDataType/rep$k/eval_metrics.txt
				python evaluate_unobservedSubclones.py -mut sim_input/$simDataType/rep$k/'input_'$filename.mut.csv -gtTree sim_input/$simDataType/rep$k/'tree_'$simDataType'_'rep$k'.csv' -lgTree $j >> sim_output/$simDataType/rep$k/eval_metrics.txt
				python evaluation.py -i "bnpc:"./sim_output/$simDataType/rep$k/$bestClusterNo/assignment.txt -G ./sim_input/$simDataType/rep$k/'input_'$filename'.G.csv' -d true -df ./sim_input/$simDataType/rep$k/'input_'$simDataType'_'rep$k'.SNVcell.csv' -v >> sim_output/$simDataType/rep$k/eval_metrics.txt
			elif [[ $simDataType == "t4" ]] || [[ $simDataType == "t5" ]]; then
				python calculate_PrecisionRecall.py -mut sim_input/$simDataType/rep$k/$filename.mut.csv -gtTree sim_input/$simDataType/rep$k/'tree_'$simDataType'_'rep$k'.csv' -lgTree $j -lace false > sim_output/$simDataType/rep$k/eval_metrics.txt
                                python evaluate_unobservedSubclones.py -mut sim_input/$simDataType/rep$k/$filename.mut.csv -gtTree sim_input/$simDataType/rep$k/'tree_'$simDataType'_'rep$k'.csv' -lgTree $j >> sim_output/$simDataType/rep$k/eval_metrics.txt
				python evaluation.py -i "bnpc:"./sim_output/$simDataType/rep$k/$bestClusterNo/assignment.txt -G ./sim_input/$simDataType/rep$k/$filename'.G.csv' -d true -df ./sim_input/$simDataType/rep$k/$simDataType'_'rep$k'.SNVcell.csv' -v >> sim_output/$simDataType/rep$k/eval_metrics.txt
			elif [[ $simDataType == "default" ]]; then
				python calculate_PrecisionRecall.py -mut sim_input/$simDataType/rep$k/$filename.mut.csv -gtTree sim_input/$simDataType/rep$k/'tree_default_'rep$k'.csv' -lgTree $j -lace false > sim_output/$simDataType/rep$k/eval_metrics.txt
                                python evaluate_unobservedSubclones.py -mut sim_input/$simDataType/rep$k/$filename.mut.csv -gtTree sim_input/$simDataType/rep$k/'tree_default_'rep$k'.csv' -lgTree $j >> sim_output/$simDataType/rep$k/eval_metrics.txt
				python evaluation.py -i "bnpc:"./sim_output/$simDataType/rep$k/$bestClusterNo/assignment.txt -G ./sim_input/$simDataType/rep$k/$filename'.G.csv' -d true -df ./sim_input/$simDataType/rep$k/$simDataType'_'rep$k'.SNVcell.csv' -v >> sim_output/$simDataType/rep$k/eval_metrics.txt
			else
				python calculate_PrecisionRecall.py -mut sim_input/$simDataType/rep$k/'input_'$filename.mut.csv -gtTree sim_input/$simDataType/rep$k/'tree_default_'rep$k'.csv' -lgTree $j -lace false > sim_output/$simDataType/rep$k/eval_metrics.txt
				python evaluate_unobservedSubclones.py -mut sim_input/$simDataType/rep$k/'input_'$filename.mut.csv -gtTree sim_input/$simDataType/rep$k/'tree_default_'rep$k'.csv' -lgTree $j >> sim_output/$simDataType/rep$k/eval_metrics.txt
				python evaluation.py -i "bnpc:"./sim_output/$simDataType/rep$k/$bestClusterNo/assignment.txt -G ./sim_input/$simDataType/rep$k/'input_'$filename'.G.csv' -d true -df ./sim_input/$simDataType/rep$k/'input_'$simDataType'_'rep$k'.SNVcell.csv' -v >> sim_output/$simDataType/rep$k/eval_metrics.txt
			fi
		done
	done
done

# Get the boxplots from the evaluation results and running time
python boxplot_metrics.py -algo lgTree -datasets ap001 default -output test
